name: Docker image builder and deployer

on:
  workflow_call:
    inputs:
      image-tag:
        required: false
        type: string
        default: untagged
      deploy:
        required: false
        type: boolean
        default: false

env:
  ECR_REGISTRY: 028220097019.dkr.ecr.eu-central-1.amazonaws.com
  PROJECT_PREFIX: conflict-nightlight
  FUNCTION_NAME: python-app
  WORKING_DIR: lambdas/python

jobs:
  build-publish-and-deploy-image:
    name: Build publish and deploy image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set-docker-image-tag
        run: |
          echo "DOCKER_IMAGE_TAG=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_PREFIX }}-${{ env.FUNCTION_NAME 
          }}-repo:${{ inputs.image-tag }}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG_LATEST=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_PREFIX }}-${{ env
          .FUNCTION_NAME }}-repo:latest" >> $GITHUB_ENV

      - name: install-protobuf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Generate python proto stubs
        working-directory: .
        run: make generate-python

      - uses: aws-actions/configure-aws-credentials@v2
        if: ${{ inputs.deploy == true }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - id: login-ecr
        if: ${{ inputs.deploy == true }}
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

      - uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          push: ${{ inputs.deploy }}
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          build-args: |
            VERSION=${{ inputs.image-tag }}
          platforms: linux/amd64
          tags: |
            ${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update image on lambda
        if: ${{ inputs.deploy == true }}
        run: |
          aws lambda update-function-code --function-name ${{ env.PROJECT_PREFIX }}-${{ env.FUNCTION_NAME }}-function --image-uri ${{ env.DOCKER_IMAGE_TAG_LATEST }}
